# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'remote_control.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys

from PyQt5 import QtCore, QtGui, QtWidgets
import websocket


class RemoteController(object):

    def __init__(self, MainWindow ) -> None:
        self.setupUi(MainWindow)

    def startBtn(self):
        self.label.setText('Recording Started')
        self.label.adjustSize()
        session_prefix = self.download_prefix_text.toPlainText()
        if self.isPrefix(session_prefix):
            self.ws.send("START_REC@@"+session_prefix)

    def stopBtn(self):
        self.label.setText('Recording Stopped')
        self.ws.send("STOP_REC")

    def statusBtn(self):
        self.ws.send("STATUS")
        message = self.ws.recv()
        self.status_label.setPlainText(message)

    def clearStatusBtn(self):
        self.status_label.setPlainText("")

    def downloadBtn(self):
        endpoint = self.api_input.toPlainText()
        download_prefix = self.download_prefix_text.toPlainText()
        if self.isPrefix(download_prefix):
            self.ws.send("UPLOAD@@"+endpoint+","+download_prefix)

    def isPrefix(self, prefix_text):
        if prefix_text is None or len(prefix_text) == 0:
           self.label.setText('Prefix Text Missing')
           self.label.adjustSize()
           self.label.setStyleSheet("background-color: red")
           return False
        return True

    def setupUi(self, MainWindow):

        #
        # Setup the WEB SOCKET
        self.ws = websocket.WebSocket()
        #self.ws.connect("ws://172.16.62.107:7867/remotecon")
        self.ws.connect("ws://192.168.5.2:7867/remotecon")

        #
        # Setup the GUI
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 800)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(290, 10, 161, 61))
        font = QtGui.QFont()
        font.setFamily("Source Code Pro")
        font.setPointSize(19)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.start_btn = QtWidgets.QPushButton(self.centralwidget)
        self.start_btn.setGeometry(QtCore.QRect(130, 120, 161, 61))
        self.start_btn.setFont(font)
        self.start_btn.setObjectName("pushButton")
        self.start_btn.clicked.connect(self.startBtn)
        self.stop_btn = QtWidgets.QPushButton(self.centralwidget)
        self.stop_btn.setGeometry(QtCore.QRect(430, 120, 161, 61))
        self.stop_btn.setFont(font)
        self.stop_btn.setObjectName("pushButton_2")
        self.stop_btn.clicked.connect(self.stopBtn)
        self.status_btn = QtWidgets.QPushButton(self.centralwidget)
        self.status_btn.setGeometry(QtCore.QRect(280, 200,  161, 61))
        self.status_btn.setFont(font)
        self.status_btn.setObjectName("pushButton_3")
        self.status_btn.clicked.connect(self.statusBtn)
        self.api_input = QtWidgets.QTextEdit(self.centralwidget)
        self.api_input.setGeometry(QtCore.QRect(143, 450, 451, 31))
        self.api_input.setObjectName("textEdit")
        self.download_prefix_text = QtWidgets.QTextEdit(self.centralwidget)
        self.download_prefix_text.setGeometry(QtCore.QRect(180, 80, 380, 31))
        self.download_prefix_text.setObjectName("prefix_text")
        self.download_btn = QtWidgets.QPushButton(self.centralwidget)
        self.download_btn.setGeometry(QtCore.QRect(280, 380, 161, 61))
        self.download_btn.setFont(font)
        self.download_btn.setObjectName("pushButton_4")
        self.download_btn.clicked.connect(self.downloadBtn)
        self.status_label = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.status_label.setGeometry(QtCore.QRect(173, 280, 381, 91))
        self.status_label.setObjectName("plainTextEdit")
        self.status_clear_btn = QtWidgets.QPushButton(self.centralwidget)
        self.status_clear_btn.setGeometry(QtCore.QRect(560, 341, 31, 31))
        self.status_clear_btn.setFont(font)
        self.status_clear_btn.setObjectName("pushButton_5")
        self.status_clear_btn.clicked.connect(self.clearStatusBtn)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Remote Control App"))
        self.label.setText(_translate("MainWindow", "RC APP"))
        self.start_btn.setText(_translate("MainWindow", "Start"))
        self.stop_btn.setText(_translate("MainWindow", "Stop"))
        self.status_btn.setText(_translate("MainWindow", "Status"))
        self.status_clear_btn.setText(_translate("MainWindow", "X"))
        self.status_clear_btn.setStyleSheet('QPushButton {;color: red;}')
        self.api_input.setPlaceholderText(_translate("MainWindow", "Please enter the api endpoint where you want the files to be uploaded."))
        self.download_prefix_text.setPlaceholderText(_translate("MainWindow", " Enter Session Prefix"))
        self.download_btn.setText(_translate("MainWindow", "Download"))
        self.status_label.setPlaceholderText(_translate("MainWindow", "No status "))


if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()

    rc = RemoteController(MainWindow)
    rc.setupUi(MainWindow)

    MainWindow.show()
    sys.exit(app.exec_())
